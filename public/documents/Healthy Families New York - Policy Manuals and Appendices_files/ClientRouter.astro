import.meta.env = {"ASSETS_PREFIX": undefined, "BASE_URL": "/", "DEV": true, "MODE": "development", "PROD": false, "PUBLIC_GOOGLEMAPSAPIKEY": "AIzaSyDvY_FdqSMPhb7-yFpUUSAYY8a_EKv_Qy4", "SITE": "https://www.healthyfamiliesnewyork.org", "SSR": false};import { supportsViewTransitions, navigate } from "/@id/__x00__astro:transitions/client";
import { init } from "/node_modules/.pnpm/astro@5.8.2_rollup@4.44.1_typescript@5.8.3_yaml@2.7.1/node_modules/astro/dist/virtual-modules/prefetch.js?v=e18b61ba";
let lastClickedElementLeavingWindow = null;
function getFallback() {
  const el = document.querySelector('[name="astro-view-transitions-fallback"]');
  if (el) {
    return el.getAttribute("content");
  }
  return "animate";
}
function isReloadEl(el) {
  return el.dataset.astroReload !== void 0;
}
const leavesWindow = (ev) => ev.button && ev.button !== 0 || // left clicks only
ev.metaKey || // new tab (mac)
ev.ctrlKey || // new tab (windows)
ev.altKey || // download
ev.shiftKey;
if (supportsViewTransitions || getFallback() !== "none") {
  if (import.meta.env.DEV && window.matchMedia("(prefers-reduced-motion)").matches) {
    console.warn(
      `[transitions]: all view transition animations, including fallback animation, are disabled as this device has the prefer-reduced-motion setting enabled.`
    );
  }
  document.addEventListener("click", (ev) => {
    let link = ev.target;
    lastClickedElementLeavingWindow = leavesWindow(ev) ? link : null;
    if (ev.composed) {
      link = ev.composedPath()[0];
    }
    if (link instanceof Element) {
      link = link.closest("a, area");
    }
    if (!(link instanceof HTMLAnchorElement) && !(link instanceof SVGAElement) && !(link instanceof HTMLAreaElement))
      return;
    const linkTarget = link instanceof HTMLElement ? link.target : link.target.baseVal;
    const href = link instanceof HTMLElement ? link.href : link.href.baseVal;
    const origin = new URL(href, location.href).origin;
    if (isReloadEl(link) || link.hasAttribute("download") || !link.href || linkTarget && linkTarget !== "_self" || origin !== location.origin || lastClickedElementLeavingWindow || ev.defaultPrevented) {
      return;
    }
    ev.preventDefault();
    navigate(href, {
      history: link.dataset.astroHistory === "replace" ? "replace" : "auto",
      sourceElement: link
    });
  });
  document.addEventListener("submit", (ev) => {
    let el = ev.target;
    const submitter = ev.submitter;
    const clickedWithKeys = submitter && submitter === lastClickedElementLeavingWindow;
    lastClickedElementLeavingWindow = null;
    if (el.tagName !== "FORM" || ev.defaultPrevented || isReloadEl(el) || clickedWithKeys) {
      return;
    }
    const form = el;
    const formData = new FormData(form, submitter);
    const formAction = typeof form.action === "string" ? form.action : form.getAttribute("action");
    const formMethod = typeof form.method === "string" ? form.method : form.getAttribute("method");
    let action = submitter?.getAttribute("formaction") ?? formAction ?? location.pathname;
    const method = submitter?.getAttribute("formmethod") ?? formMethod ?? "get";
    if (method === "dialog" || location.origin !== new URL(action, location.href).origin) {
      return;
    }
    const options = { sourceElement: submitter ?? form };
    if (method === "get") {
      const params = new URLSearchParams(formData);
      const url = new URL(action);
      url.search = params.toString();
      action = url.toString();
    } else {
      options.formData = formData;
    }
    ev.preventDefault();
    navigate(action, options);
  });
  if (!false) {
    init({ prefetchAll: true });
  }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNsaWVudFJvdXRlci5hc3RybyJdLCJzb3VyY2VzQ29udGVudCI6WyItLS1cbnR5cGUgRmFsbGJhY2sgPSAnbm9uZScgfCAnYW5pbWF0ZScgfCAnc3dhcCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuXHRmYWxsYmFjaz86IEZhbGxiYWNrO1xuXHQvKiogQGRlcHJlY2F0ZWQgaGFuZGxlRm9ybXMgaXMgZW5hYmxlZCBieSBkZWZhdWx0IGluIEFzdHJvIDQuMFxuXHQgKlxuXHQgKiBTZXQgYGRhdGEtYXN0cm8tcmVsb2FkYCBvbiB5b3VyIGZvcm0gdG8gb3B0LW91dCBvZiB0aGUgZGVmYXVsdCBiZWhhdmlvci5cblx0ICovXG5cdGhhbmRsZUZvcm1zPzogYm9vbGVhbjtcbn1cblxuY29uc3QgeyBmYWxsYmFjayA9ICdhbmltYXRlJyB9ID0gQXN0cm8ucHJvcHM7XG4tLS1cblxuPHN0eWxlIGlzOmdsb2JhbD5cblx0LyogUm91dGUgYW5ub3VuY2VyICovXG5cdC5hc3Ryby1yb3V0ZS1hbm5vdW5jZXIge1xuXHRcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0XHRsZWZ0OiAwO1xuXHRcdHRvcDogMDtcblx0XHRjbGlwOiByZWN0KDAgMCAwIDApO1xuXHRcdGNsaXAtcGF0aDogaW5zZXQoNTAlKTtcblx0XHRvdmVyZmxvdzogaGlkZGVuO1xuXHRcdHdoaXRlLXNwYWNlOiBub3dyYXA7XG5cdFx0d2lkdGg6IDFweDtcblx0XHRoZWlnaHQ6IDFweDtcblx0fVxuPC9zdHlsZT5cbjxtZXRhIG5hbWU9XCJhc3Ryby12aWV3LXRyYW5zaXRpb25zLWVuYWJsZWRcIiBjb250ZW50PVwidHJ1ZVwiIC8+XG48bWV0YSBuYW1lPVwiYXN0cm8tdmlldy10cmFuc2l0aW9ucy1mYWxsYmFja1wiIGNvbnRlbnQ9e2ZhbGxiYWNrfSAvPlxuPHNjcmlwdD5cblx0aW1wb3J0IHR5cGUgeyBPcHRpb25zIH0gZnJvbSAnYXN0cm86dHJhbnNpdGlvbnMvY2xpZW50Jztcblx0aW1wb3J0IHsgc3VwcG9ydHNWaWV3VHJhbnNpdGlvbnMsIG5hdmlnYXRlIH0gZnJvbSAnYXN0cm86dHJhbnNpdGlvbnMvY2xpZW50Jztcblx0Ly8gTk9URTogaW1wb3J0IGZyb20gYGFzdHJvL3ZpcnR1YWwtbW9kdWxlcy9wcmVmZXRjaC5qc2AgYXMgYGFzdHJvOnByZWZldGNoYCByZXF1aXJlcyB0aGUgYHByZWZldGNoYCBjb25maWcgdG8gYmUgZW5hYmxlZFxuXHQvLyBAdHMtaWdub3JlXG5cdGltcG9ydCB7IGluaXQgfSBmcm9tICdhc3Ryby92aXJ0dWFsLW1vZHVsZXMvcHJlZmV0Y2guanMnO1xuXG5cdHR5cGUgRmFsbGJhY2sgPSAnbm9uZScgfCAnYW5pbWF0ZScgfCAnc3dhcCc7XG5cdGxldCBsYXN0Q2xpY2tlZEVsZW1lbnRMZWF2aW5nV2luZG93OiBFdmVudFRhcmdldCB8IG51bGwgPSBudWxsO1xuXG5cdGZ1bmN0aW9uIGdldEZhbGxiYWNrKCk6IEZhbGxiYWNrIHtcblx0XHRjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPVwiYXN0cm8tdmlldy10cmFuc2l0aW9ucy1mYWxsYmFja1wiXScpO1xuXHRcdGlmIChlbCkge1xuXHRcdFx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZSgnY29udGVudCcpIGFzIEZhbGxiYWNrO1xuXHRcdH1cblx0XHRyZXR1cm4gJ2FuaW1hdGUnO1xuXHR9XG5cblx0ZnVuY3Rpb24gaXNSZWxvYWRFbChlbDogSFRNTEVsZW1lbnQgfCBTVkdBRWxlbWVudCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiBlbC5kYXRhc2V0LmFzdHJvUmVsb2FkICE9PSB1bmRlZmluZWQ7XG5cdH1cblxuXHRjb25zdCBsZWF2ZXNXaW5kb3cgPSAoZXY6IE1vdXNlRXZlbnQpID0+XG5cdFx0KGV2LmJ1dHRvbiAmJiBldi5idXR0b24gIT09IDApIHx8IC8vIGxlZnQgY2xpY2tzIG9ubHlcblx0XHRldi5tZXRhS2V5IHx8IC8vIG5ldyB0YWIgKG1hYylcblx0XHRldi5jdHJsS2V5IHx8IC8vIG5ldyB0YWIgKHdpbmRvd3MpXG5cdFx0ZXYuYWx0S2V5IHx8IC8vIGRvd25sb2FkXG5cdFx0ZXYuc2hpZnRLZXk7IC8vIG5ldyB3aW5kb3dcblxuXHRpZiAoc3VwcG9ydHNWaWV3VHJhbnNpdGlvbnMgfHwgZ2V0RmFsbGJhY2soKSAhPT0gJ25vbmUnKSB7XG5cdFx0aWYgKGltcG9ydC5tZXRhLmVudi5ERVYgJiYgd2luZG93Lm1hdGNoTWVkaWEoJyhwcmVmZXJzLXJlZHVjZWQtbW90aW9uKScpLm1hdGNoZXMpIHtcblx0XHRcdGNvbnNvbGUud2Fybihcblx0XHRcdFx0YFt0cmFuc2l0aW9uc106IGFsbCB2aWV3IHRyYW5zaXRpb24gYW5pbWF0aW9ucywgaW5jbHVkaW5nIGZhbGxiYWNrIGFuaW1hdGlvbiwgYXJlIGRpc2FibGVkIGFzIHRoaXMgZGV2aWNlIGhhcyB0aGUgcHJlZmVyLXJlZHVjZWQtbW90aW9uIHNldHRpbmcgZW5hYmxlZC5gLFxuXHRcdFx0KTtcblx0XHR9XG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXYpID0+IHtcblx0XHRcdGxldCBsaW5rID0gZXYudGFyZ2V0O1xuXG5cdFx0XHRsYXN0Q2xpY2tlZEVsZW1lbnRMZWF2aW5nV2luZG93ID0gbGVhdmVzV2luZG93KGV2KSA/IGxpbmsgOiBudWxsO1xuXG5cdFx0XHRpZiAoZXYuY29tcG9zZWQpIHtcblx0XHRcdFx0bGluayA9IGV2LmNvbXBvc2VkUGF0aCgpWzBdO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGxpbmsgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG5cdFx0XHRcdGxpbmsgPSBsaW5rLmNsb3Nlc3QoJ2EsIGFyZWEnKTtcblx0XHRcdH1cblx0XHRcdGlmIChcblx0XHRcdFx0IShsaW5rIGluc3RhbmNlb2YgSFRNTEFuY2hvckVsZW1lbnQpICYmXG5cdFx0XHRcdCEobGluayBpbnN0YW5jZW9mIFNWR0FFbGVtZW50KSAmJlxuXHRcdFx0XHQhKGxpbmsgaW5zdGFuY2VvZiBIVE1MQXJlYUVsZW1lbnQpXG5cdFx0XHQpXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdC8vIFRoaXMgY2hlY2sgdmVyaWZpZXMgdGhhdCB0aGUgY2xpY2sgaXMgaGFwcGVuaW5nIG9uIGFuIGFuY2hvclxuXHRcdFx0Ly8gdGhhdCBpcyBnb2luZyB0byBhbm90aGVyIHBhZ2Ugd2l0aGluIHRoZSBzYW1lIG9yaWdpbi4gQmFzaWNhbGx5IGl0IGRldGVybWluZXNcblx0XHRcdC8vIHNhbWUtb3JpZ2luIG5hdmlnYXRpb24sIGJ1dCBvbWl0cyBzcGVjaWFsIGtleSBjb21ib3MgZm9yIG5ldyB0YWJzLCBldGMuXG5cdFx0XHRjb25zdCBsaW5rVGFyZ2V0ID0gbGluayBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ID8gbGluay50YXJnZXQgOiBsaW5rLnRhcmdldC5iYXNlVmFsO1xuXHRcdFx0Y29uc3QgaHJlZiA9IGxpbmsgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCA/IGxpbmsuaHJlZiA6IGxpbmsuaHJlZi5iYXNlVmFsO1xuXHRcdFx0Y29uc3Qgb3JpZ2luID0gbmV3IFVSTChocmVmLCBsb2NhdGlvbi5ocmVmKS5vcmlnaW47XG5cdFx0XHRpZiAoXG5cdFx0XHRcdGlzUmVsb2FkRWwobGluaykgfHxcblx0XHRcdFx0bGluay5oYXNBdHRyaWJ1dGUoJ2Rvd25sb2FkJykgfHxcblx0XHRcdFx0IWxpbmsuaHJlZiB8fFxuXHRcdFx0XHQobGlua1RhcmdldCAmJiBsaW5rVGFyZ2V0ICE9PSAnX3NlbGYnKSB8fFxuXHRcdFx0XHRvcmlnaW4gIT09IGxvY2F0aW9uLm9yaWdpbiB8fFxuXHRcdFx0XHRsYXN0Q2xpY2tlZEVsZW1lbnRMZWF2aW5nV2luZG93IHx8XG5cdFx0XHRcdGV2LmRlZmF1bHRQcmV2ZW50ZWRcblx0XHRcdCkge1xuXHRcdFx0XHQvLyBObyBwYWdlIHRyYW5zaXRpb25zIGluIHRoZXNlIGNhc2VzLFxuXHRcdFx0XHQvLyBMZXQgdGhlIGJyb3dzZXIgc3RhbmRhcmQgYWN0aW9uIGhhbmRsZSB0aGlzXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGV2LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRuYXZpZ2F0ZShocmVmLCB7XG5cdFx0XHRcdGhpc3Rvcnk6IGxpbmsuZGF0YXNldC5hc3Ryb0hpc3RvcnkgPT09ICdyZXBsYWNlJyA/ICdyZXBsYWNlJyA6ICdhdXRvJyxcblx0XHRcdFx0c291cmNlRWxlbWVudDogbGluayxcblx0XHRcdH0pO1xuXHRcdH0pO1xuXG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGV2KSA9PiB7XG5cdFx0XHRsZXQgZWwgPSBldi50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG5cdFx0XHRjb25zdCBzdWJtaXR0ZXIgPSBldi5zdWJtaXR0ZXI7XG5cblx0XHRcdGNvbnN0IGNsaWNrZWRXaXRoS2V5cyA9IHN1Ym1pdHRlciAmJiBzdWJtaXR0ZXIgPT09IGxhc3RDbGlja2VkRWxlbWVudExlYXZpbmdXaW5kb3c7XG5cdFx0XHRsYXN0Q2xpY2tlZEVsZW1lbnRMZWF2aW5nV2luZG93ID0gbnVsbDtcblxuXHRcdFx0aWYgKGVsLnRhZ05hbWUgIT09ICdGT1JNJyB8fCBldi5kZWZhdWx0UHJldmVudGVkIHx8IGlzUmVsb2FkRWwoZWwpIHx8IGNsaWNrZWRXaXRoS2V5cykge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBmb3JtID0gZWwgYXMgSFRNTEZvcm1FbGVtZW50O1xuXHRcdFx0Y29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZm9ybSwgc3VibWl0dGVyKTtcblx0XHRcdC8vIGZvcm0uYWN0aW9uIGFuZCBmb3JtLm1ldGhvZCBjYW4gcG9pbnQgdG8gYW4gPGlucHV0IG5hbWU9XCJhY3Rpb25cIj4gb3IgPGlucHV0IG5hbWU9XCJtZXRob2RcIj5cblx0XHRcdC8vIGluIHdoaWNoIGNhc2Ugc2hvdWxkIGZhbGxiYWNrIHRvIHRoZSBmb3JtIGF0dHJpYnV0ZVxuXHRcdFx0Y29uc3QgZm9ybUFjdGlvbiA9XG5cdFx0XHRcdHR5cGVvZiBmb3JtLmFjdGlvbiA9PT0gJ3N0cmluZycgPyBmb3JtLmFjdGlvbiA6IGZvcm0uZ2V0QXR0cmlidXRlKCdhY3Rpb24nKTtcblx0XHRcdGNvbnN0IGZvcm1NZXRob2QgPVxuXHRcdFx0XHR0eXBlb2YgZm9ybS5tZXRob2QgPT09ICdzdHJpbmcnID8gZm9ybS5tZXRob2QgOiBmb3JtLmdldEF0dHJpYnV0ZSgnbWV0aG9kJyk7XG5cdFx0XHQvLyBVc2UgdGhlIGZvcm0gYWN0aW9uLCBpZiBkZWZpbmVkLCBvdGhlcndpc2UgZmFsbGJhY2sgdG8gY3VycmVudCBwYXRoLlxuXHRcdFx0bGV0IGFjdGlvbiA9IHN1Ym1pdHRlcj8uZ2V0QXR0cmlidXRlKCdmb3JtYWN0aW9uJykgPz8gZm9ybUFjdGlvbiA/PyBsb2NhdGlvbi5wYXRobmFtZTtcblx0XHRcdC8vIFVzZSB0aGUgZm9ybSBtZXRob2QsIGlmIGRlZmluZWQsIG90aGVyd2lzZSBmYWxsYmFjayB0byBcImdldFwiXG5cdFx0XHRjb25zdCBtZXRob2QgPSBzdWJtaXR0ZXI/LmdldEF0dHJpYnV0ZSgnZm9ybW1ldGhvZCcpID8/IGZvcm1NZXRob2QgPz8gJ2dldCc7XG5cblx0XHRcdC8vIHRoZSBcImRpYWxvZ1wiIG1ldGhvZCBpcyBhIHNwZWNpYWwga2V5d29yZCB1c2VkIHdpdGhpbiA8ZGlhbG9nPiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXR0ci1mcy1tZXRob2Rcblx0XHRcdGlmIChtZXRob2QgPT09ICdkaWFsb2cnIHx8IGxvY2F0aW9uLm9yaWdpbiAhPT0gbmV3IFVSTChhY3Rpb24sIGxvY2F0aW9uLmhyZWYpLm9yaWdpbikge1xuXHRcdFx0XHQvLyBObyBwYWdlIHRyYW5zaXRpb25zIGluIHRoZXNlIGNhc2VzLFxuXHRcdFx0XHQvLyBMZXQgdGhlIGJyb3dzZXIgc3RhbmRhcmQgYWN0aW9uIGhhbmRsZSB0aGlzXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3Qgb3B0aW9uczogT3B0aW9ucyA9IHsgc291cmNlRWxlbWVudDogc3VibWl0dGVyID8/IGZvcm0gfTtcblx0XHRcdGlmIChtZXRob2QgPT09ICdnZXQnKSB7XG5cdFx0XHRcdGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoZm9ybURhdGEgYXMgYW55KTtcblx0XHRcdFx0Y29uc3QgdXJsID0gbmV3IFVSTChhY3Rpb24pO1xuXHRcdFx0XHR1cmwuc2VhcmNoID0gcGFyYW1zLnRvU3RyaW5nKCk7XG5cdFx0XHRcdGFjdGlvbiA9IHVybC50b1N0cmluZygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0aW9ucy5mb3JtRGF0YSA9IGZvcm1EYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHRldi5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0bmF2aWdhdGUoYWN0aW9uLCBvcHRpb25zKTtcblx0XHR9KTtcblxuXHRcdC8vIEB0cy1leHBlY3QtZXJyb3IgaW5qZWN0ZWQgYnkgdml0ZS1wbHVnaW4tdHJhbnNpdGlvbnMgZm9yIHRyZWVzaGFraW5nXG5cdFx0aWYgKCFfX1BSRUZFVENIX0RJU0FCTEVEX18pIHtcblx0XHRcdGluaXQoeyBwcmVmZXRjaEFsbDogdHJ1ZSB9KTtcblx0XHR9XG5cdH1cbjwvc2NyaXB0PiJdLCJtYXBwaW5ncyI6IkFBaUNDLFNBQVMseUJBQXlCLGdCQUFnQjtBQUdsRCxTQUFTLFlBQVk7QUFHckIsSUFBSSxrQ0FBc0Q7QUFFMUQsU0FBUyxjQUF3QjtBQUNoQyxRQUFNLEtBQUssU0FBUyxjQUFjLDBDQUEwQztBQUM1RSxNQUFJLElBQUk7QUFDUCxXQUFPLEdBQUcsYUFBYSxTQUFTO0VBQ2pDO0FBQ0EsU0FBTztBQUNSO0FBRUEsU0FBUyxXQUFXLElBQXdDO0FBQzNELFNBQU8sR0FBRyxRQUFRLGdCQUFnQjtBQUNuQztBQUVBLE1BQU0sZUFBZSxDQUFDLE9BQ3BCLEdBQUcsVUFBVSxHQUFHLFdBQVc7QUFD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